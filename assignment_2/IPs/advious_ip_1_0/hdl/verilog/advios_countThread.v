// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module advios_countThread (
        ap_clk,
        ap_rst,
        advios_count_V,
        advios_count_V_ap_vld,
        sec_pulse,
        sec_pulse_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
output  [27:0] advios_count_V;
output   advios_count_V_ap_vld;
output   sec_pulse;
output   sec_pulse_ap_vld;

reg[27:0] advios_count_V;
reg advios_count_V_ap_vld;
reg sec_pulse;
reg sec_pulse_ap_vld;

wire   [0:0] tmp_4_fu_118_p2;
reg   [0:0] tmp_4_reg_142;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg   [27:0] advios_count_V_load_fu_88;
wire    ap_CS_fsm_state2;
wire   [27:0] phitmp_fu_124_p2;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_118_p2 == 1'd0))) begin
        advios_count_V_load_fu_88 <= phitmp_fu_124_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_118_p2 == 1'd1)))) begin
        advios_count_V_load_fu_88 <= 28'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_4_reg_142 <= tmp_4_fu_118_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        advios_count_V = advios_count_V_load_fu_88;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (tmp_4_reg_142 == 1'd1)))) begin
        advios_count_V = 28'd0;
    end else begin
        advios_count_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (tmp_4_reg_142 == 1'd1)))) begin
        advios_count_V_ap_vld = 1'b1;
    end else begin
        advios_count_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_4_reg_142 == 1'd1))) begin
        sec_pulse = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_118_p2 == 1'd0))) begin
        sec_pulse = 1'd0;
    end else begin
        sec_pulse = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (tmp_4_fu_118_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (tmp_4_reg_142 == 1'd1)))) begin
        sec_pulse_ap_vld = 1'b1;
    end else begin
        sec_pulse_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign phitmp_fu_124_p2 = (advios_count_V_load_fu_88 + 28'd1);

assign tmp_4_fu_118_p2 = ((advios_count_V_load_fu_88 == 28'd100000000) ? 1'b1 : 1'b0);

endmodule //advios_countThread
