// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module advios_iosThread (
        ap_clk,
        ap_rst,
        inSwitch,
        ctrl,
        outLeds,
        outLeds_ap_vld,
        advios_switchs_V,
        advios_switchs_V_ap_vld,
        advios_control_V,
        advios_control_V_ap_vld,
        advios_sec_counter_V,
        advios_sec_counter_V_ap_vld,
        sec_pulse
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [3:0] inSwitch;
input  [3:0] ctrl;
output  [3:0] outLeds;
output   outLeds_ap_vld;
output  [3:0] advios_switchs_V;
output   advios_switchs_V_ap_vld;
output  [3:0] advios_control_V;
output   advios_control_V_ap_vld;
output  [3:0] advios_sec_counter_V;
output   advios_sec_counter_V_ap_vld;
input   sec_pulse;

reg[3:0] outLeds;
reg outLeds_ap_vld;
reg advios_switchs_V_ap_vld;
reg advios_control_V_ap_vld;
reg[3:0] advios_sec_counter_V;
reg advios_sec_counter_V_ap_vld;

reg   [3:0] v_V_fu_88;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [3:0] v_V_1_fu_171_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] cond_fu_149_p2;
wire   [0:0] tmp_fu_162_p2;
wire   [0:0] tmp_1_read_fu_137_p2;
wire   [3:0] r_V_fu_155_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_45;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd0) & (1'd1 == tmp_1_read_fu_137_p2))) begin
        v_V_fu_88 <= v_V_1_fu_171_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1) & (1'd1 == tmp_fu_162_p2)))) begin
        v_V_fu_88 <= 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        advios_control_V_ap_vld = 1'b1;
    end else begin
        advios_control_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1))) begin
        if ((1'd1 == tmp_fu_162_p2)) begin
            advios_sec_counter_V = 4'd0;
        end else if (((tmp_fu_162_p2 == 1'd0) & (1'd1 == tmp_1_read_fu_137_p2))) begin
            advios_sec_counter_V = v_V_1_fu_171_p2;
        end else begin
            advios_sec_counter_V = 'bx;
        end
    end else begin
        advios_sec_counter_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd0) & (1'd1 == tmp_1_read_fu_137_p2)) | ((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1) & (1'd1 == tmp_fu_162_p2)))) begin
        advios_sec_counter_V_ap_vld = 1'b1;
    end else begin
        advios_sec_counter_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        advios_switchs_V_ap_vld = 1'b1;
    end else begin
        advios_switchs_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((cond_fu_149_p2 == 1'd1) & (1'd1 == tmp_fu_162_p2))) begin
            outLeds = 4'd0;
        end else if ((ap_condition_45 == 1'b1)) begin
            outLeds = v_V_1_fu_171_p2;
        end else if ((cond_fu_149_p2 == 1'd0)) begin
            outLeds = r_V_fu_155_p2;
        end else begin
            outLeds = 'bx;
        end
    end else begin
        outLeds = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd0) & (1'd1 == tmp_1_read_fu_137_p2)) | ((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd1) & (1'd1 == tmp_fu_162_p2)) | ((1'b1 == ap_CS_fsm_state3) & (cond_fu_149_p2 == 1'd0)))) begin
        outLeds_ap_vld = 1'b1;
    end else begin
        outLeds_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign advios_control_V = ctrl;

assign advios_switchs_V = inSwitch;

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_condition_45 = ((cond_fu_149_p2 == 1'd1) & (tmp_fu_162_p2 == 1'd0) & (1'd1 == tmp_1_read_fu_137_p2));
end

assign cond_fu_149_p2 = ((ctrl == 4'd0) ? 1'b1 : 1'b0);

assign r_V_fu_155_p2 = (inSwitch & ctrl);

assign tmp_1_read_fu_137_p2 = sec_pulse;

assign tmp_fu_162_p2 = ((inSwitch == 4'd8) ? 1'b1 : 1'b0);

assign v_V_1_fu_171_p2 = (v_V_fu_88 + 4'd1);

endmodule //advios_iosThread
